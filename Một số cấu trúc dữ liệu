#include <iostream>

using namespace std;

//Array: mảng
void Array() {
	int n;
	cin >> n;
	int a[n];
	for(int i = 0 ; i < n ; i++) {
		cin >> a[i];
	}
	for(int i = 0 ; i < n ; i++) {
		cout << a[i] << " ";
	}
}

//Linked list: danh sách liên kết đơn
struct Node {
	int vaule;
	Node* next;
};

Node* temp = NULL;

void insert(Node** head, int data) {
	Node* newnode = new Node;
	newnode->vaule = data;
	newnode->next = nullptr;
	if((*head) == NULL) {
		*head = newnode;
		return;
	}
	Node* temp = *head;
	while(temp->next != NULL) {
		temp = temp->next;
	}
	temp->next = newnode;
}

void Cout(Node* head) {
	while(head != NULL) {
		cout << head->vaule << " ";
		head = head->next;
	}
}

//Stack vs queue: ngăn xếp và hàng đợi
int n = 0;
int stack[1000];
int queue[1000];

int pop_stack() {
	if(n >= 1) n--;
}

int top_stack() {
	return stack[n - 1];
}

int push_stack(int x) {
	stack[n] = x;
	n++;
}

int pop_queue() {
	if (n >= 1) {
	for(int i = 0 ; i < n - 1 ; i++) {
		queue[i] = queue[i + 1];
	}
	n--;
	}
}

int top_queue() {
	return queue[0];
}

int push_queue(int x) {
	queue[n] = x;
	n++;
}

//Tree(binary_tree): Cây nhị phân
//Mô phỏng
	/*	A
	   / \
	  B   C
	 / \   \
	D   E   F */
// A,B,D,E,C,F

struct node {
	char character;
	node* left;
	node* right;
};

node* leaf(char ch) {
	node* newnode = new node;
	newnode->character = ch;
	newnode->left = nullptr;
	newnode->right = nullptr;
	return newnode;
}

//Mô phỏng
void tree() {
	node* root = new node;
	root->character = 'A';
	root->left = leaf('B');
	root->right = leaf('C');
	root->left->left = leaf('D');
	root->left->right = leaf('E');
	root->right->right = leaf('F');
}

//Hash table: Bảng băm
#define Size 100
int Hash(int data) {
	return data % Size;
}

Node* hash_table[Size];

void insert(int data) {
	int index = Hash(data);
	Node* temp = new Node;
	temp->vaule = data;
	temp->next = nullptr;
	if(hash_table[index] == NULL) {
		hash_table[index] = temp;
		return;
	}
	hash_table[index]->next = temp;
}

void Cout_hash_table() {
	for(int i = 0 ; i <= Size ; i++) {
		Node* temp = hash_table[i];
		while(temp != NULL) {
			cout << temp->vaule << " ";
			temp = temp->next;
		}
	}
}

//Heap: đống
//Max heap
      /*    15
          /    \
         7      5
        / \    /
       6   3  4   */
void heapify_max(int a[], int n, int i) {
    int left = i * 2 + 1;
    int right = i * 2 + 2;

    int largest = i;
    if(left < n && a[left] > a[largest]) {
        largest = left;
    }
    if(right < n && a[right] > a[largest]) {
        largest = right;
    }

    if(largest != i) {
        swap(a[i], a[largest]);
        heapify_max(a, n, largest);
    }
}
//Min heap
 /*       3
       /    \
      5      4
     / \    /
    6   7  15    */
void heapify_min(int a[], int n, int i) {
    int left = i * 2 + 1;
    int right = i * 2 + 2;

    int largest = i;
    if(left < n && a[left] < a[largest]) {
        largest = left;
    }
    if(right < n && a[right] < a[largest]) {
        largest = right;
    }

    if(largest != i) {
        swap(a[i], a[largest]);
        heapify_min(a, n, largest);
    }
}

void Cout() {
    int m = 6;
    int a[m] = {5, 3, 4, 6, 7, 15};
    for(int i = m / 2 - 1 ; i >= 0 ; i--) {
        heapify_max(a, m, i);
    }
    for(auto i : a) {
        cout << i << " ";
    }
}
int main () {
    Cout();
}
