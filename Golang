// LeetCode 2. Add Two Numbers
package main

import (
	"fmt"
)

type ListNode struct {
	val  int
	next *ListNode
}

func Get_val(l *ListNode) int {
	if(l != nil) {
		return l.val
	} else {
		return 0
	}
}

func Check(l1 *ListNode, l2 *ListNode) bool {
	if l1 != nil || l2 != nil {
		return true
	}
	return false
}

func Next(l *ListNode) *ListNode {
	if(l != nil) {
		return l.next
	} 
	return nil
}

func Add_val(x int) *ListNode{
	var newnode *ListNode = new(ListNode)
	newnode.val = x
	newnode.next = nil
	return newnode
}

func Add_number(l1 *ListNode, l2 *ListNode) *ListNode {
	var head *ListNode = new(ListNode)
	var current = head
	var save, sum int = 0, 0
	var left, right = l1, l2

	for ; Check(left, right) == true || save != 0; {
		sum = Get_val(left) + Get_val(right) + save

		if(sum > 9) {
			save = 1
			sum -= 10
		} else {
			save = 0
		}

		current.val = sum
		if (Check(Next(left), Next(right)) == true || save != 0) {
			current.next = new(ListNode)
			current = current.next
		}
		left = Next(left)
		right = Next(right)
	}
	return head
}

func Print_List(l *ListNode) {
	for l != nil {
		fmt.Print(l.val, " ")
		l = l.next
	}
	println()
}

func main() {
	var a, b *ListNode = new(ListNode), new(ListNode)
	a.val = 2
	b.val = 5
	a.next = Add_val(4)
	b.next = Add_val(6)
	a.next.next = Add_val(3)
	b.next.next = Add_val(4)
	Print_List(a)
	Print_List(b)
	Print_List(Add_number(a, b))
}
